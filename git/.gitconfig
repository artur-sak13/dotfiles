[user]
	name = artur.sak
	email = artur.sak@twopoint.com
	signingkey = C2AABCF42E1405B7
[credential]
	helper = osxkeychain
[core]
	autocrlf = input
	excludesfile = ~/.gitignore
	trustctime = false
	editor = nvim
[apply]
	whitespace = fix
[alias]
	# Color graph log view
	graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%C(blue)%x20(%ce)%x20%C(cyan)[gpg:%GK%x20%G?]%C(reset)%n%x20%s%n"
	last = log -1 --stat
	unstage = reset HEAD --
	cached = diff --cached
	stat = status -sb

	# Show verbose output about tags branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	stashes = stash list

	# Add all untracked files to .gitignore
	ignore = "!git status | grep -P \"^\\t\" | grep -vF .gitignore | sed \"s/^\\t//\" >> .gitignore"
	
	# From trevor bramble https://twitter.com/TrevorBramble/status/774292970681937920
	alias=!git config -l | grep ^alias | cut -c 7- | sort

	# From https://github.com/GitAlias/gitalias
	add-alias = "!f() { [ $# = 3 ] && git config $1 alias.\"$2\" \"$3\" && return 0 || echo \"Usage: git add-(local|global)-alias <new alias> <original command>\" >&2 && return 1; }; f"
	add-global-alias = "!git add-alias --global"
	add-local-alias = "!git add-alias --local"

	uncommit = reset --soft HEAD~1
	unadd = reset HEAD

	# Track all remote branches that aren't already being tracked
	track-all-remote-branches = !"f() { git branch -r | grep -v ' -> ' | sed 's/^\\+origin\\///' ; }; f"

	# Discard changes in a (list of) file(s) in the working tree
	discard = checkout --

	# Clean and discard changes and untracked files in working tree
	cleanout = !git clean -df && git checkout -- .

	# Blow away all local changes
	reset-to-pristine = !git reset --hard && git clean -ffdx

	ours = !"f() { git checkout --ours $@ && git add $@; }; f"
	theirs = !"f() { git checkout --theirs $@ && git add $@; }; f"

	save = stash push
	pop = stash pop

	push-to-all-remotes = !git retmote | xargs -I% -n1 git push %

	# CVS Aliases
	cvs-i = cvsimport -k -a
	cvs-e = cvsexportcommit -u -p

	# Delete all branches that have been merged into the master branch
	master-cleanse = !git master-cleanse-local; git master-cleanse-remote

	# Delete all local branches that have been merged into the local master branch
	master-cleanse-local = "!git checkout master && git branch --merged | xargs git branch --delete"

	# Delete all remote branches that have been merged into the remote master branch
	master-cleanse-remote = !"git branch --remotes --merged origin/master | sed 's# *origin/##' | grep -v '^master$' xargs -I% git push origin :% 2>&1 | grep --colour=never 'deleted'"

		# Expunge a file everywhere; this command is typically for a serious problem, 
		# such as accidentially committing a file of sensistive data, such as passwords.
		# After you use command, you will likely need to force push everything.
		# See https://help.github.com/articles/removing-sensitive-data-from-a-repository/
	expunge = !"f() { git filter-branch --force --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all }; f"

	snapshot = !git stash push "snapshot: $(date)" && git stash apply "stash@{0}"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	up = !git pull origin master && git remote prune origin && git submodule update --init --recursive
	undo = !git reset HEAD~1 --mixed
	top = !git log --format=format:%an | sort | uniq -c | sort -r | head -n 20

	# Pull in remote changes for the current repo and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including any submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# View abbreviated SHA, description, and history graph of latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# Delete branches the have been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"
[color]
	ui = auto
[diff]
	tool = vimdiff3
	renames = copies
[difftool]
    prompt = false
[help]
	autocorrect = 1
[merge]
	tool = vimdiff3
	conflictstyle = diff3
	prompt = false
    log = true
[branch]
    autosetuprebase = always
[url "git@gitlab.twopoint.io:"]
    insteadOf = https://gitlab.twopoint.io/
[commit]
	gpgsign = true
