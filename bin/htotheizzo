#!/usr/bin/env bash
#
# Original script by Jess Frazelle
# With modifications by Artur Sak
#

set -e

help() {
    echo "htotheizzo - a simple script to update homebrew or apt, gems, pip, and node packages"
}

dcleanup() {
    local containers
    mapfile -t containers < <(docker ps --filter status=exited -q 2>/dev/null)
    
    docker rm "${containers[@]}" 2>/dev/null
    local images
    
    mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
    docker rmi "${images[@]}" 2>/dev/null
}

update_docker() {
    echo
    echo "Updating docker..."
    echo

    dcleanup || true
    systemctl stop docker || true

    local tmp_tar=/tmp/docker.tgz
    local binary_uri="https://download.docker.com/linux/static/edge/x86_64"
    
    local docker_version
    
    docker_version=$(curl -sSL "https://api.github.com/repos/docker/docker-ce/releases/latest" | jq --raw-output .tag_name)
    docker_version=${docker_version#v}

    (
        set -x
        curl -fSL "${binary_uri}/docker-${docker_version}.tgz" -o "$tmp_tar"
        tar -C /usr/local/bin --strip-components 1 -xzvf "$tmp_tar"
        
        rm -f "${tmp_tar}"
        rm -f /usr/local/bin/ctr
        rm -f /usr/local/bin/containerd
        rm -f /usr/local/bin/containerd-shim
        docker -v
    )
    
    chmod +x /usr/local/bin/docker*
    
    systemctl daemon-reload
    systemctl enable docker
    systemctl start docker
}

update_containerd() {
    echo
    echo "Updating containerd..."
    echo

    local tmp_tar=/tmp/containerd.tar.gz
    local containerd_version
    
    containerd_version=$(curl -sSL "https://api.github.com/repos/containerd/containerd/releases" | jq --raw-output '.[0].tag_name')
    containerd_version=${containerd_version#v}
    
    local binary_uri="https://github.com/containerd/containerd/releases/download/v${containerd_version}/containerd-${containerd_version}.linux-amd64.tar.gz"
    (
        set -x
        curl -fSL "$binary_uri" -o "$tmp_tar"
        tar -C /usr/local/bin --strip-components 1 -xzvf "$tmp_tar"
        rm -f "$tmp_tar"
        containerd -v
    )
    
    systemctl daemon-reload
    systemctl enable containerd
    systemctl start containerd
}

update_rust() {
    echo
    echo "Updating rust..."
    echo

    command -v rustup >/dev/null 2>&1 || { echo >&2 "I require rust but it's not installed.  Aborting."; return; }

    rustup update
}

update_tool() {
    echo
    echo "Updating ${1}..."
    echo
    
    local tmp_zip="/tmp/${1}.zip"
    local tool_version

    tool_version=$(curl -sSL "https://checkpoint-api.hashicorp.com/v1/check/${1}" | jq -r '.current_version')

    local binary_uri="https://releases.hashicorp.com/${1}/${tool_version}/${1}_${tool_version}_linux_amd64.zip"
    (
        set -x
        curl -fSL "$binary_uri" -o "$tmp_zip"
        unzip -o "$tmp_zip" -d /usr/local/bin
        rm -f "$tmp_zip"
    )
}

update_apt() {
    echo
    echo "Updating apt..."
    echo

    apt -y update
    apt -y upgrade
    apt -y autoremove
    apt -y autoclean
    apt -y clean
    rm -rf /var/lib/apt/lists/*
}

update_brews() {
    echo
    echo "Updating homebrew packages..."
    echo

    brew update
    brew upgrade
    brew cleanup -s
    brew cask upgrade
}

# Update ruby gems
update_gems() {
    echo
    echo "Updating ruby gems..."
    echo

    gem update --system
    gem update
    gem cleanup
}

# Update node and npm packages
update_node() {
    echo
    echo "Updating node..."
    echo

    version=$(nvm version node)
    # shellcheck source=/dev/null
    (
        cd "${NVM_DIR}"
        git fetch --tags origin
        git checkout "$(git describe --abbrev=0 --tags --match 'v[0-9]*')" "$(git rev-list --tags --max-count=1)"
    ) && \. "${NVM_DIR}/nvm.sh"
    
    nvm install node --reinstall-packages-from=node
    nvm uninstall "${version}"
    nvm clear-cache
}

# Update pip packages
update_python() {
    echo
    echo "Updating python packages..."
    echo

    pip2 install --user --upgrade pip
    pip2 freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install --user --upgrade
    pip3 install --user --upgrade pip
    pip3 freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip3 install --user --upgrade
}

# Update kubectl
update_kubectl() {
    echo
    echo "Updating kubectl..."
    echo

    KUBERNETES_VERSION=$(curl -sSL https://storage.googleapis.com/kubernetes-release/release/stable.txt)
    curl -sSL "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" > /usr/local/bin/kubectl
    chmod +x /usr/local/bin/kubectl
    echo "kubectl $(kubectl version --client --short)"
}

# Update kops
update_kops() {
    echo
    echo "Updating kops..."
    echo
    
    curl -LO https://github.com/kubernetes/kops/releases/download/"$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64"
    chmod +x kops-linux-amd64
    mv kops-linux-amd64 /usr/local/bin/kops
}

update() {
    echo "htotheizzo is running the update functions"

    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        echo "Hey there Linux user. You rule."

        if [ "$UID" -ne 0 ]; then
            echo "Please run as root"
            exit 1
        fi

        update_apt;
        update_docker;
        update_containerd; 
        update_tool "packer";
        update_tool "terraform";
        update_kubectl;
        update_kops;
    elif [[ "$OSTYPE" == darwin* ]]; then
        update_brews;
        update_gems;
        update_python;
        update_node;
        update_rust;
    else
        echo "We don't have update functions for OS: ${OSTYPE}"
        echo "Moving on..."
    fi
    
    echo "htotheizzo is complete, you got 99 problems but updates ain't one"
}

main() {
    local arg=$1
    if [[ -n "$arg" ]]; then
        help
    else
        update
    fi
}

main "$@"
