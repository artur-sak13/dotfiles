#!/usr/bin/env bash
set -euo pipefail

# -----------------------------------------------------------------------------
# Logging utilities
# -----------------------------------------------------------------------------
log() { printf '[%s][config-macos] %s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$*"; }
warn() { printf '[%s][config-macos][WARN] %s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$*" >&2; }
error() { printf '[%s][config-macos][ERROR] %s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$*" >&2; }

DESIRED_HOSTNAME=""
KEEPALIVE_PID=""

keep_sudo_alive() {
  # Ask for the admin password upfront
  sudo -v

  # Keep-alive: update existing `sudo` time stamp until .macos has finished
  (
    while true; do
      sudo -n true
      sleep 60
    done
  ) &
  KEEPALIVE_PID=$!
}

cleanup() {
  if [[ -n "${KEEPALIVE_PID:-}" ]] && kill -0 "${KEEPALIVE_PID}" 2>/dev/null; then
    kill "${KEEPALIVE_PID}" || true
  fi
}

trap cleanup EXIT
trap 'error "Command failed: $BASH_COMMAND"; exit 1' ERR

# Sanitize LocalHostName (Bonjour): ASCII alnum and hyphen only
sanitize_bonjour_name() {
  tr -cd 'A-Za-z0-9-' <<<"$1"
}

# Write defaults but don't abort the script on failure
safe_defaults_write() {
  local domain="$1"
  local err

  if ! err="$(defaults write "$domain" "${@:2}" 2>&1 >/dev/null)"; then
    warn "defaults write ${domain} ${*:2}\n -> ${err}"
  fi
}

# Ensure a sandboxed app's container exists so defaults can write
ensure_app_container() {
  local domain="$1"
  local app="$2"
  local container="${HOME}/Library/Containers/${domain}"

  if [[ ! -d "$container" ]]; then
    warn "${app} hasn't been launched yet. Launching to create its container…"

    if open -ga "$app" >/dev/null 2>&1; then
      for _ in {1..20}; do
        [[ -d "$container" ]] && break
        sleep 0.5
      done

      osascript -e "quit app \"${app}\"" >/dev/null 2>&1 || true

      [[ -d "$container" ]] || warn "Container for ${app} still missing; prefs may fail to write."
    else
      warn "Could not launch ${app}; preferences may not be writable."
    fi
  fi
}

###############################################################################
# Kill affected applications                                                  #
###############################################################################
killall_affected_apps() {
  log "Restarting affected applications…"

  local apps=(
    "Activity Monitor"
    "Calendar"
    "cfprefsd"
    "Contacts"
    "Dock"
    "Finder"
    "Mail"
    "Messages"
    "Photos"
    "Safari"
    "SystemUIServer"
  )

  for app in "${apps[@]}"; do
    killall "$app" &>/dev/null || true

    # Give slow apps time to quit
    sleep 0.2
  done
}

###############################################################################
# General UI/UX                                                               #
###############################################################################
configure_ui() {
  local desired_host_name="${1:-}"

  log "Configuring UI/UX..."

  # Enable dark mode
  safe_defaults_write NSGlobalDomain AppleInterfaceStyle -string "Dark"

  # Set computer names (Sharing). Only if provided.
  if [[ -n "${desired_host_name}" ]]; then
    local bonjour_name
    bonjour_name="$(sanitize_bonjour_name "${desired_host_name}")"

    if [[ -z "${bonjour_name}" ]]; then
      warn "Provided hostname sanitized to empty; skipping LocalHostName."
    else
      if [[ "${bonjour_name}" != "${desired_host_name}" ]]; then
        warn "Sanitized LocalHostName to '${bonjour_name}' (from '${desired_host_name}')."
      fi

      sudo scutil --set LocalHostName "${bonjour_name}"
      sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "${bonjour_name}"
    fi

    # ComputerName: user-visible name; do not append .local
    sudo scutil --set ComputerName "${desired_host_name}"

    # HostName: set only if an FQDN and not ending with .local
    if [[ "${desired_host_name}" == *.* && "${desired_host_name}" != *.local ]]; then
      sudo scutil --set HostName "${desired_host_name}"
    else
      warn "Skipping HostName (not an FQDN or ends with .local)."
    fi
  fi

  # Save to disk (not to iCloud) by default
  safe_defaults_write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  # Increase window resize speed
  safe_defaults_write NSGlobalDomain NSWindowResizeTime -float 0.001

  # Expand save/print panels by default
  safe_defaults_write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  safe_defaults_write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true
  safe_defaults_write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  safe_defaults_write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

  # Enable the “Are you sure you want to open this application?” dialog
  safe_defaults_write com.apple.LaunchServices LSQuarantine -bool true

  # Reveal IP address, hostname, OS version, etc. when clicking the clock
  # in the login window
  sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

  if command -v pmset >/dev/null 2>&1; then
    sudo pmset -a sleep 0 || warn "Failed to disable computer sleep with pmset."
  else
    sudo systemsetup -setcomputersleep Never >/dev/null 2>&1 || warn "Failed to disable computer sleep."
  fi

  # Automatically quit printer app once the print jobs complete
  safe_defaults_write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

  # Remove duplicates in the “Open With” menu
  /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister \
    -kill -r -domain local -domain system -domain user

  # Disable automatic capitalization/dashes/periods/quotes/correct
  safe_defaults_write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false
  safe_defaults_write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
  safe_defaults_write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
  safe_defaults_write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
  safe_defaults_write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

  # Always show scrollbars
  safe_defaults_write NSGlobalDomain AppleShowScrollBars -string "Always"
}

###############################################################################
# Input Devices                                                               #
###############################################################################
configure_input() {
  log "Configuring input devices..."

  # Disable press-and-hold for keys in favor of key repeat
  safe_defaults_write NSGlobalDomain ApplePressAndHoldEnabled -bool false

  # Fast key repeat (aggressive)
  safe_defaults_write NSGlobalDomain KeyRepeat -int 1
  safe_defaults_write NSGlobalDomain InitialKeyRepeat -int 10

  # Trackpad: enable tap to click
  safe_defaults_write com.apple.AppleMultitouchTrackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  safe_defaults_write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
}

###############################################################################
# Screen                                                                      #
###############################################################################
configure_screen() {
  log "Configuring screen and screenshots..."

  # Require password immediately after sleep
  safe_defaults_write com.apple.screensaver askForPassword -int 1
  safe_defaults_write com.apple.screensaver askForPasswordDelay -int 0

  # Save screenshots to ~/Screenshots (create if missing)
  local screenshots_dir="${HOME}/Screenshots"
  mkdir -p "${screenshots_dir}"
  safe_defaults_write com.apple.screencapture location -string "${screenshots_dir}"

  # Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
  safe_defaults_write com.apple.screencapture type -string "png"

  # Disable shadow in screenshots
  safe_defaults_write com.apple.screencapture disable-shadow -bool true
}

###############################################################################
# Terminal                                                       #
###############################################################################
configure_terminal() {
  log "Configuring Terminal…"

  # Only use UTF-8 in Terminal.app
  safe_defaults_write com.apple.terminal StringEncodings -array 4
}

###############################################################################
# Finder                                                                      #
###############################################################################
configure_finder() {
  log "Configuring Finder…"

  # Show hidden files by default
  safe_defaults_write com.apple.finder AppleShowAllFiles -bool true

  # Show all filename extensions
  safe_defaults_write NSGlobalDomain AppleShowAllExtensions -bool true

  # Show status and path bars
  safe_defaults_write com.apple.finder ShowStatusBar -bool true
  safe_defaults_write com.apple.finder ShowPathbar -bool true

  # Display full POSIX path as Finder window title
  safe_defaults_write com.apple.finder _FXShowPosixPathInTitle -bool true

  # Keep folders on top when sorting by name
  safe_defaults_write com.apple.finder _FXSortFoldersFirst -bool true
  safe_defaults_write com.apple.finder _FXSortFoldersFirstOnDesktop -bool true

  # Search the current folder by default
  safe_defaults_write com.apple.finder FXDefaultSearchScope -string "SCcf"

  # Disable the warning when changing a file extension
  safe_defaults_write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Enable spring loading for directories (no delay)
  safe_defaults_write NSGlobalDomain com.apple.springing.enabled -bool true
  safe_defaults_write NSGlobalDomain com.apple.springing.delay -float 0

  # Avoid creating .DS_Store files on network or USB volumes
  safe_defaults_write com.apple.desktopservices DSDontWriteNetworkStores -bool true
  safe_defaults_write com.apple.desktopservices DSDontWriteUSBStores -bool true

  # Automatically open a new Finder window when a volume is mounted
  safe_defaults_write com.apple.frameworks.diskimages auto-open-ro-root -bool true
  safe_defaults_write com.apple.frameworks.diskimages auto-open-rw-root -bool true
  safe_defaults_write com.apple.finder OpenWindowForNewRemovableDisk -bool true

  # Use list view in all Finder windows by default
  # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
  safe_defaults_write com.apple.finder FXPreferredViewStyle -string "Nlsv"

  # New Finder windows show: Home
  safe_defaults_write com.apple.finder NewWindowTarget -string "PfHm"
  safe_defaults_write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"

  # Disable the warning before emptying the Trash
  safe_defaults_write com.apple.finder WarnOnEmptyTrash -bool false

  # Show the ~/Library folder
  chflags nohidden ~/Library || true

  # Show the /Volumes folder
  sudo chflags nohidden /Volumes || true

  # Expand the following File Info panes:
  # “General”, “Open with”, and “Sharing & Permissions”
  safe_defaults_write com.apple.finder FXInfoPanesExpanded -dict \
    General -bool true \
    OpenWith -bool true \
    Privileges -bool true
}

###############################################################################
# Dock, Mission Control, and hot corners                                      #
###############################################################################
configure_dock() {
  log "Configuring Dock and Mission Control…"

  # Enable highlight hover effect for stacks
  safe_defaults_write com.apple.dock mouse-over-hilite-stack -bool true

  # Enable spring loading for all Dock items
  safe_defaults_write com.apple.dock enable-spring-load-actions-on-all-items -bool true

  # Show indicator lights for open applications in the Dock
  safe_defaults_write com.apple.dock show-process-indicators -bool true

  # Speed up Mission Control animations
  safe_defaults_write com.apple.dock expose-animation-duration -float 0.1

  # Don't rearrange Spaces based on most recent use
  safe_defaults_write com.apple.dock mru-spaces -bool false

  # Disable displaying recent applications in Dock
  safe_defaults_write com.apple.dock show-recents -bool false

  # Dock autohide and speed tweaks
  safe_defaults_write com.apple.dock autohide -bool true
  safe_defaults_write com.apple.dock autohide-delay -float 0
  safe_defaults_write com.apple.dock autohide-time-modifier -float 0.15
  safe_defaults_write com.apple.dock tilesize -int 36

  # Reset Launchpad DB, but keep the desktop wallpaper intact
  if [[ -d "${HOME}/Library/Application Support/Dock" ]]; then
    find "${HOME}/Library/Application Support/Dock" -name "*-*.db" -maxdepth 1 -delete
  fi
}

###############################################################################
# Safari & WebKit                                                             #
###############################################################################
configure_safari() {
  log "Configuring Safari…"

  ensure_app_container "com.apple.Safari" "Safari"

  # Privacy: don’t send search queries to Apple
  safe_defaults_write com.apple.Safari UniversalSearchEnabled -bool false
  safe_defaults_write com.apple.Safari SuppressSearchSuggestions -bool true

  # Press Tab to highlight elements on a web page
  safe_defaults_write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true
  safe_defaults_write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true

  # Show the full URL in the address bar (note: this still hides the scheme)
  safe_defaults_write com.apple.Safari ShowFullURLInSmartSearchField -bool true

  # Set home page to `about:blank` for faster loading
  safe_defaults_write com.apple.Safari HomePage -string "about:blank"

  # Prevent Safari from opening ‘safe’ files automatically after downloading
  safe_defaults_write com.apple.Safari AutoOpenSafeDownloads -bool false

  # Hide bookmarks bar by default
  safe_defaults_write com.apple.Safari ShowFavoritesBar -bool false

  # Hide Top Sites sidebar
  safe_defaults_write com.apple.Safari ShowSidebarInTopSites -bool false

  # Enable debug and develop menus
  safe_defaults_write com.apple.Safari IncludeInternalDebugMenu -bool true
  safe_defaults_write com.apple.Safari IncludeDevelopMenu -bool true
  safe_defaults_write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  safe_defaults_write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

  # Add a context menu item for showing the Web Inspector in web views
  safe_defaults_write NSGlobalDomain WebKitDeveloperExtras -bool true

  # Make Safari’s search banners default to Contains instead of Starts With
  safe_defaults_write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

  # Enable continuous spellchecking
  safe_defaults_write com.apple.Safari WebContinuousSpellCheckingEnabled -bool true

  # Disable AutoFill
  safe_defaults_write com.apple.Safari AutoFillFromAddressBook -bool false
  safe_defaults_write com.apple.Safari AutoFillPasswords -bool false
  safe_defaults_write com.apple.Safari AutoFillCreditCardData -bool false
  safe_defaults_write com.apple.Safari AutoFillMiscellaneousForms -bool false

  # Warn about fraudulent websites
  safe_defaults_write com.apple.Safari WarnAboutFraudulentWebsites -bool true

  # Block pop-up windows
  safe_defaults_write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false
  safe_defaults_write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false

  # Update extensions automatically
  safe_defaults_write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true
}

###############################################################################
# Mail                                                                        #
###############################################################################
configure_mail() {
  log "Configuring Mail…"

  ensure_app_container "com.apple.mail" "Mail"

  # Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app
  safe_defaults_write com.apple.mail AddressesIncludeNameOnPasteboard -bool false

  # Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app
  safe_defaults_write com.apple.mail NSUserKeyEquivalents -dict-add "Send" "@\\U21a9"

  # Display emails in threaded mode, sorted by date (oldest at the top)
  safe_defaults_write com.apple.mail DraftsViewerAttributes -dict-add "DisplayInThreadedMode" -string "yes"
  safe_defaults_write com.apple.mail DraftsViewerAttributes -dict-add "SortedDescending" -string "yes"
  safe_defaults_write com.apple.mail DraftsViewerAttributes -dict-add "SortOrder" -string "received-date"

  # Disable inline attachments (just show the icons)
  safe_defaults_write com.apple.mail DisableInlineAttachmentViewing -bool true
}

###############################################################################
# Spotlight                                                                   #
###############################################################################
configure_spotlight() {
  log "Configuring Spotlight (reindexing)…"

  safe_defaults_write com.apple.Spotlight orderedItems -array \
    '{"enabled" = 1;"name" = "APPLICATIONS";}' \
    '{"enabled" = 1;"name" = "SYSTEM_PREFS";}' \
    '{"enabled" = 1;"name" = "DIRECTORIES";}' \
    '{"enabled" = 1;"name" = "PDF";}' \
    '{"enabled" = 1;"name" = "FONTS";}' \
    '{"enabled" = 0;"name" = "DOCUMENTS";}' \
    '{"enabled" = 0;"name" = "MESSAGES";}' \
    '{"enabled" = 0;"name" = "CONTACT";}' \
    '{"enabled" = 0;"name" = "EVENT_TODO";}' \
    '{"enabled" = 0;"name" = "IMAGES";}' \
    '{"enabled" = 0;"name" = "BOOKMARKS";}' \
    '{"enabled" = 0;"name" = "MUSIC";}' \
    '{"enabled" = 0;"name" = "MOVIES";}' \
    '{"enabled" = 0;"name" = "PRESENTATIONS";}' \
    '{"enabled" = 0;"name" = "SPREADSHEETS";}' \
    '{"enabled" = 0;"name" = "SOURCE";}' \
    '{"enabled" = 0;"name" = "MENU_DEFINITION";}' \
    '{"enabled" = 0;"name" = "MENU_OTHER";}' \
    '{"enabled" = 0;"name" = "MENU_CONVERSION";}' \
    '{"enabled" = 0;"name" = "MENU_EXPRESSION";}' \
    '{"enabled" = 0;"name" = "MENU_WEBSEARCH";}' \
    '{"enabled" = 0;"name" = "MENU_SPOTLIGHT_SUGGESTIONS";}'

  # Load new settings before rebuilding the index
  killall mds >/dev/null 2>&1

  # Make sure indexing is enabled and rebuild for the main volume
  sudo mdutil -i on / >/dev/null
  sudo mdutil -E / >/dev/null
}

###############################################################################
# Activity Monitor                                                            #
###############################################################################
configure_activity_monitor() {
  log "Configuring Activity Monitor…"

  ensure_app_container "com.apple.ActivityMonitor" "Activity Monitor"

  # Show the main window when launching Activity Monitor
  safe_defaults_write com.apple.ActivityMonitor OpenMainWindow -bool true

  # Visualize CPU usage in the Activity Monitor Dock icon
  safe_defaults_write com.apple.ActivityMonitor IconType -int 5

  # Show all processes in Activity Monitor
  safe_defaults_write com.apple.ActivityMonitor ShowCategory -int 0

  # Sort Activity Monitor results by CPU usage
  safe_defaults_write com.apple.ActivityMonitor SortColumn -string "CPUUsage"
  safe_defaults_write com.apple.ActivityMonitor SortDirection -int 0
}

###############################################################################
# TextEdit                                                                    #
###############################################################################
configure_textedit() {
  log "Configuring TextEdit…"

  ensure_app_container "com.apple.TextEdit" "TextEdit"

  # Use plain text mode for new TextEdit documents
  safe_defaults_write com.apple.TextEdit RichText -int 0

  # Open and save files as UTF-8 in TextEdit
  safe_defaults_write com.apple.TextEdit PlainTextEncoding -int 4
  safe_defaults_write com.apple.TextEdit PlainTextEncodingForWrite -int 4
}

###############################################################################
# Mac App Store                                                               #
###############################################################################
configure_app_store() {
  log "Configuring App Store and Software Update…"

  # Enable the WebKit Developer Tools in the Mac App Store
  safe_defaults_write com.apple.appstore WebKitDeveloperExtras -bool true

  # Enable Debug Menu in the Mac App Store
  safe_defaults_write com.apple.appstore ShowDebugMenu -bool true

  # Enable the automatic update check
  safe_defaults_write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true

  # Check for software updates daily, not just once per week
  safe_defaults_write com.apple.SoftwareUpdate ScheduleFrequency -int 1

  # Download newly available updates in background
  safe_defaults_write com.apple.SoftwareUpdate AutomaticDownload -int 1

  # Install System data files & security updates
  safe_defaults_write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

  # Turn on app auto-update
  safe_defaults_write com.apple.commerce AutoUpdate -bool true

  # Allow the App Store to reboot machine on macOS updates
  safe_defaults_write com.apple.commerce AutoUpdateRestartRequired -bool true

  sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true || true
  sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate AutomaticDownload -int 1 || true
}

###############################################################################
# Photos                                                                      #
###############################################################################
configure_photos() {
  log "Configuring Photos…"

  # Prevent Photos from opening automatically when devices are plugged in
  defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true
}

ensure_xcode_clt() {
  log "Checking Xcode Command Line Tools…"

  if ! xcode-select -p >/dev/null 2>&1; then
    warn "Xcode Command Line Tools not found. Attempting to start installer…"

    xcode-select --install >/dev/null 2>&1 || true

    warn "If a dialog appeared, complete installation, then re-run this script."
  fi
}

ensure_rosetta() {
  if [[ "$(uname -m)" == "arm64" ]]; then
    log "Ensuring Rosetta 2 is installed (Apple Silicon)…"

    if ! /usr/bin/pgrep oahd >/dev/null 2>&1; then
      sudo softwareupdate --install-rosetta --agree-to-license || warn "Rosetta install may have been skipped."
    fi
  fi
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --hostname)
      shift

      DESIRED_HOSTNAME="${1:-}"

      [[ -n "$DESIRED_HOSTNAME" ]] || {
        error "--hostname requires a value"
        exit 1
      }
      ;;

    -h | --help)
      print_usage
      exit 0
      ;;

    *)
      error "Unknown argument: $1"
      print_usage
      exit 1
      ;;
    esac

    shift || true
  done
}

print_usage() {
  cat <<EOF
Usage: $(basename "$0") [--hostname NAME]

One-time macOS setup script. Options:
  --hostname NAME   Set ComputerName/LocalHostName (HostName only if FQDN)
  -h, --help        Show this help and exit
EOF
}

main() {
  parse_args "$@"

  log "Starting macOS initial setup…"
  keep_sudo_alive

  # Close any open System Settings/Preferences panes, to prevent them from overriding
  # settings we're about to change
  log "Closing System Settings/Preferences…"
  osascript -e 'tell application "System Settings" to quit' >/dev/null 2>&1 || true
  osascript -e 'tell application "System Preferences" to quit' >/dev/null 2>&1 || true

  ensure_xcode_clt
  ensure_rosetta

  configure_ui "$DESIRED_HOSTNAME"
  configure_input
  configure_screen
  configure_terminal
  configure_finder
  configure_dock
  configure_safari
  configure_mail
  configure_activity_monitor
  configure_textedit
  configure_app_store
  configure_photos
  configure_spotlight

  killall_affected_apps

  log "Done. Some changes require a logout/restart to take effect."
}

main "$@"
